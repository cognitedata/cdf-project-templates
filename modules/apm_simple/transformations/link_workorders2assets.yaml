externalId: tutorial-load-workorders2assets
name: tutorial-load-Workorders2assets
query: >-
  /* MAPPING_MODE_ENABLED: true */
  /* {"version":1,"sourceType":"raw","mappings":[{"from":"externalId","to":"externalId","asType":"STRING"},{"from":"sourceExternalId","to":"startNode","asType":"STRUCT<`space`:STRING, `externalId`:STRING>"},{"to":"endNode","asType":"STRUCT<`space`:STRING, `externalId`:STRING>","from":"targetExternalId"}],"sourceLevel1":"{{apm_simple_raw_db}}","sourceLevel2":"workorder2assets"} */
  select
    cast(`externalId` as STRING) as externalId,
    node_reference('{{apm_simple_space}}', `sourceExternalId`) as startNode,
    node_reference('{{apm_simple_space}}', `targetExternalId`) as endNode
  from
    `{{apm_simple_raw_db}}`.`workorder2assets`;
destination:
  dataModel:
    space: {{apm_simple_space}}
    externalId: {{apm_simple_datamodel}}
    version: "1"
    destinationType: WorkOrder
    destinationRelationshipFromType: linkedAssets
  instanceSpace: {{apm_simple_space}}
  type: instances
ignoreNullFields: true
shared: true
action: upsert
# Specify credentials separately like this:
# You can also use different credentials for the running transformations than the ones you use to deploy
authentication:
  clientId: {{clientId}}
  clientSecret: {{clientId}}
  tokenUrl: {{tokenUrl}}
  # Optional: If idP requires providing the scopes
  cdfProjectName: {{cdfProjectName}}
  scopes:
    - {{scopes}}
  # Optional: If idP requires providing the audience
  audience: {{audience}}
